cmake_minimum_required(VERSION 3.20)
project(client)

set(CMAKE_CXX_STANDARD 20)

# Enable the export of compilation commands
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Include files generated by Conan
include(${CMAKE_BINARY_DIR}/conan_toolchain.cmake)

# SFML and ASIO library configuration
set(SFML_STATIC_LIBRARIES FALSE)
find_package(SFML 2.5 COMPONENTS graphics window system network audio REQUIRED)
find_package(asio REQUIRED)

# Include directories
include_directories(include)

# Debug flags (optional)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address")

# Theme configuration
set(THEME
    "DEFAULT"
    CACHE STRING "Select the theme to use")
set_property(CACHE THEME PROPERTY STRINGS "DEFAULT" "DARK" "LIGHT")
if(THEME STREQUAL "DEFAULT")
    add_definitions(-DTHEME=0)
elseif(THEME STREQUAL "DARK")
    add_definitions(-DTHEME=1)
elseif(THEME STREQUAL "LIGHT")
    add_definitions(-DTHEME=2)
endif()

# Source files (using wildcards)
file(GLOB_RECURSE SOURCE_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h"
)

# Create the executable
add_executable(client ${SOURCE_FILES})

# Include directories and link libraries
target_include_directories(client PRIVATE include)
target_link_libraries(client sfml-graphics sfml-window sfml-system sfml-audio asio::asio)

# **Set the output directory to the root only if not building inside Docker**
option(BUILD_IN_DOCKER "Build in Docker container" OFF)

if(NOT BUILD_IN_DOCKER)
    set_target_properties(client PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../../
    )
endif()


# **Doxygen setup for unified documentation**
option(BUILD_DOC "Build documentation" ON)

find_package(Doxygen REQUIRED)

if(DOXYGEN_FOUND)
    # Use CMAKE_SOURCE_DIR to refer to the root directory
    set(DOXYFILE_IN ${CMAKE_CURRENT_SOURCE_DIR}/docs/doxygen/Doxyfile.in)
    set(DOXYFILE_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

    set(DOXYGEN_INPUT_DIR "${CMAKE_SOURCE_DIR}")
    set(DOXYGEN_OUTPUT_DIR "${CMAKE_SOURCE_DIR}/docs/doxygen")

    configure_file(${DOXYFILE_IN} ${DOXYFILE_OUT} @ONLY)

    add_custom_target(doc_doxygen ALL
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYFILE_OUT}
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        COMMENT "Generating unified API documentation with Doxygen for client"
        VERBATIM
    )
else()
    message(FATAL_ERROR "Client - Doxygen is required to build the documentation.")
endif()